name: test turtlebot multi snap

on:
  push:
    branches:
      - feature/multi-snap
  pull_request:
    branches:
      - feature/multi-snap
  workflow_dispatch:
  workflow_call:
   inputs:
      branch-name:
        required: false
        type: string
        default: ''

jobs:

  # Collect all relative paths containing a 'snap/snapcraft.yaml'
  collect_snap_names:
    runs-on: ubuntu-latest
    outputs:
      snap-names: ${{ steps.snap-names.outputs.snap-names }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch-name == '' && github.ref || inputs.branch-name }}
      - id: snap-names
        run: echo "snap-names=$(find . -type f -name 'snapcraft.yaml' | sed -r 's|^\./([^/]+)/snap/snapcraft.yaml|\1|' | sort | uniq | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  snaps:
    needs: [collect_snap_names]
    uses: canonical/robotics-actions-workflows/.github/workflows/snap.yaml@main
    secrets:
      snapstore-login: ${{ secrets.STORE_LOGIN }}
    with:
      runs-on: '["ubuntu-latest", ["self-hosted", "linux", "ARM64", "medium", "noble"]]'
      lxd-image: 'ubuntu:20.04'
      snapcraft-source-subdir: "${{ needs.collect_snap_names.outputs.snap-names }}"
      git-ref: ${{ inputs.branch-name == '' && github.ref || inputs.branch-name }}
      snapcraft-enable-experimental-extensions: true
      snap-test-script: |
            #!/bin/bash

            set -euxo pipefail

            export HOME=/home/ubuntu

            check_publishing() {
                local name=$1
                local timeout=$2
                local start_time=$(date +%s)
                local topic_data=""

                while [ -z "${topic_data}" ]; do
                  echo "waiting for /$name data"
                  topic_data=$(rostopic echo -n 10 /$name 2>/dev/null)
                  if [ -z "${topic_data}" ]; then
                    echo "Topic /$name is not publishing data."
                  else
                    echo "Topic /$name is publishing data. Exiting."
                  fi

                  local current_time=$(date +%s)
                  local elapsed_time=$((current_time - start_time))

                  if [ $elapsed_time -ge $timeout ]; then
                      echo "Error $name is not running."
                      exit 1
                  fi
                  sleep 1
                done
            }


            check_existence() {
                local topic_or_node=$1
                local name=$2
                local timeout=$3
                local start_time=$(date +%s)
                local error_code=0

                while true; do
                    error_code=$($topic_or_node list | grep -q "/$name"; echo $?)
                    if [ $error_code -eq 0 ]; then
                        echo "$name is running."
                        return 0
                    fi

                    local current_time=$(date +%s)
                    local elapsed_time=$((current_time - start_time))

                    if [ $elapsed_time -ge $timeout ]; then
                        echo "Error $name is not running."
                        sudo snap stop turtlebot3c-bringup
                        exit 1
                    fi
                    sleep 1
                done
            }

            ## Install ROS
            echo "Installing ROS"
            sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" > /etc/apt/sources.list.d/ros-latest.list'

            sudo apt install --yes curl
            curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
            sudo apt -q update
            sudo apt install -q --yes ros-noetic-desktop-full
            sudo apt install -q --yes ros-noetic-turtlebot3-gazebo

            set +u
            source /opt/ros/noetic/setup.bash
            set -u

            echo "Show snaps connections"
            snap connections turtlebot3c-bringup
            snap connections turtlebot3c-nav
            snap connections turtlebot3c-teleop
            sleep 2

            echo "Show snaps services"
            snap services turtlebot3c-bringup
            sleep 2

            echo "Set the simulation parameter"
            sudo snap set turtlebot3c-bringup simulation=true
            sudo snap set turtlebot3c-nav simulation=true
            sleep 10

            sudo snap start turtlebot3c-teleop.core
            check_existence rosnode mux 30

            ## set gui arg to false with sed since the arg is not exposed
            sudo sed -i "s/\(<arg name=\"gui\" value=\"\).*\(\"\/>\)/\1false\2/" /opt/ros/noetic/share/turtlebot3_gazebo/launch/turtlebot3_empty_world.launch

            ## Launch turtlebot simulation
            TURTLEBOT3_MODEL=waffle_pi roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch debug:=true &
            pid=$!

            echo "check simulation is running"
            check_publishing scan 30
            check_publishing joint_states 30

            ## test core robot_state_publisher
            check_existence rostopic tf 30
            check_existence rosnode robot_state_publisher 30

            ## test mapping node
            sudo snap start turtlebot3c-nav.mapping
            check_existence rostopic map 300
            check_existence rosnode turtlebot3_slam_gmapping 300
            echo "moving the robot"
            timeout 30s rostopic pub -r 10 /cmd_vel geometry_msgs/Twist -- '[0.0, 0.0, 0.0]' '[1.0, 0.0, 0.0]' || true
            sudo snap stop turtlebot3c-nav.mapping

            ## check map has been created
            timeout=300
            start_time=$(date +%s)
            while true; do
              echo "check map exists.."
              error_code=$(sudo bash -c 'cd /root/snap/turtlebot3c-nav/common/map/ && ls | grep -q ".yaml"'; echo $?)
              if [ $? -eq 0 ]; then
                echo "map found - starting navigation"
                break
              fi
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))
              if [ $elapsed_time -ge $timeout ]; then
                echo "Map not found"
                exit 1
              fi
              sleep 1
            done

            sudo snap start turtlebot3c-nav.navigation
            check_existence rosnode move_base 300
            check_existence rostopic nav_vel 300
            sudo snap stop turtlebot3c-nav.navigation

            kill $pid
            sudo snap stop turtlebot3c-bringup
