name: test turtlebot multi snap

on:
  push:
    branches:
      - feature/multi-snap
  pull_request:
    branches:
      - feature/multi-snap
  workflow_dispatch:
  workflow_call:

jobs:

  # Collect all relative paths containing a 'snap/snapcraft.yaml'
  collect_snap_names:
    runs-on: ubuntu-latest
    outputs:
      snap-names: ${{ steps.snap-names.outputs.snap-names }}
    steps:
      - uses: actions/checkout@v3
      - id: snap-names
        run: echo "snap-names=$(find . -type f -name 'snapcraft.yaml' | sed -r 's|^\./([^/]+)/snap/snapcraft.yaml|\1|' | sed 's/-snap$//' | sort | uniq | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  # Run snapcraft for each example
  build_snaps:
    needs: collect_snap_names
    strategy:
      fail-fast: false
      matrix:
        snap-name: ${{ fromJson(needs.collect_snap_names.outputs.snap-names) }}
    name: "Snap ${{ matrix.snap-name }}"
    uses: ubuntu-robotics/snap_workflows/.github/workflows/build-install-test-snap.yaml@F_add_option_to_select_snap_path
    with:
      branch-name: feature/multi-snap
      snap-name: ${{ matrix.snap-name }}
      snapcraft-build-path: ./${{ matrix.snap-name }}-snap
      snap-install-args: --dangerous
      snapcraft-args: --enable-experimental-extensions

  test_snaps:
    runs-on: ubuntu-20.04
    needs: build_snaps
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: .
      - name: test-script
        run: |
            #!/bin/bash
            set -x
            check_publishing() {
                local name=$1
                while [ -z "${topic_data}" ]; do
                  echo "waiting for /$name data"
                  topic_data=$(rostopic echo -n 10 /$name 2>/dev/null)
                  if [ -z "${topic_data}" ]; then
                    echo "Topic /$name is not publishing data."
                  else
                    echo "Topic /$name is publishing data. Exiting."
                    echo "$topic_data"
                  fi
                  sleep 1
                done
            }

            check_existence() {
                local topic_or_node=$1
                local name=$2
                local timeout=$3
                local start_time=$(date +%s)

                while true; do
                    $topic_or_node list | grep -q "/$name"
                    if [ $? -eq 0 ]; then
                        echo "$name is running."
                        return 0
                    fi

                    local current_time=$(date +%s)
                    local elapsed_time=$((current_time - start_time))

                    if [ $elapsed_time -ge $timeout ]; then
                        echo "Error $name is not running."
                        sudo snap stop turtlebot3c-bringup
                        exit 1
                    fi
                    sleep 1
                done
            }

            ## Install ROS
            echo "Installing ROS"
            sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'

            sudo apt install curl
            curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -
            sudo apt -q update
            sudo apt install -q ros-noetic-desktop-full
            sudo apt install -q ros-noetic-turtlebot3-gazebo

            source /opt/ros/noetic/setup.sh

            echo "installing snaps"
            # # Iterate through each file in the folder
            for dir in */; do
                cd "$dir" || exit
                for file in *; do
                    # Check if it is a regular file
                    if [ -f "$file" ]; then
                        sudo snap install "$file" --dangerous
                    fi
                done
                cd ..
            done

            echo "Connect snaps to foundational snap"
            sudo snap connect turtlebot3c-bringup:ros-noetic ros-noetic-robot
            sudo snap connect turtlebot3c-nav:ros-noetic ros-noetic-robot
            sudo snap connect turtlebot3c-teleop:ros-noetic ros-noetic-robot
            sleep 10

            echo "Set the simulation parameter"
            sudo snap set turtlebot3c-bringup simulation=true
            sudo snap set turtlebot3c-nav simulation=true
            sleep 10

            sudo snap start turtlebot3c-teleop.core
            check_existence rosnode mux 30

            ## set gui arg to false with sed since the arg is not exposed
            sudo sed -i "s/\(<arg name=\"gui\" value=\"\).*\(\"\/>\)/\1false\2/" /opt/ros/noetic/share/turtlebot3_gazebo/launch/turtlebot3_empty_world.launch

            ## Launch turtlebot simulation
            TURTLEBOT3_MODEL=waffle_pi roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch debug:=true &
            pid=$!

            echo "check simulation is running"
            check_publishing scan
            check_publishing joint_states

            ## test core robot_state_publisher
            check_existence rostopic tf 30
            check_existence rosnode robot_state_publisher 30

            ## test mapping node
            sudo snap start turtlebot3c-nav.mapping
            sleep 10
            check_existence rostopic map 30
            check_existence rosnode turtlebot3_slam_gmapping 30
            echo "moving the robot"
            rostopic list
            rosnode list
            
            echo "publish once"
            rostopic pub /cmd_vel geometry_msgs/Twist -- '[0.0, 0.0, 0.0]' '[1.0, 0.0, 0.0]'
            
            echo "timeout with preserve status"
            timeout 10s --preserve-status rostopic pub -r 10 /cmd_vel geometry_msgs/Twist -- '[0.0, 0.0, 0.0]' '[1.0, 0.0, 0.0]'
            echo $?

            check_publishing map
            sudo snap stop turtlebot3c-nav.mapping

            ## check map has been created
            timeout=30
            start_time=$(date +%s)
            while true; do
              echo "check map exists.."
              sudo bash -c 'cd /root/snap/turtlebot3c-nav/common/map/ && ls | grep -q ".yaml"'
              if [ $? -eq 0 ]; then
                echo "map found - starting navigation"
                exit 0
              fi
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))
              if [ $elapsed_time -ge $timeout ]; then
                echo "Map not found"
                exit 1
              fi
              sleep 1
            done

            sudo snap start turtlebot3c-nav.navigation
            check_existence rosnode move_base 30
            check_existence rostopic nav_vel 30
            sudo snap stop turtlebot3c-nav.navigation

            kill $pid
            sudo snap stop turtlebot3c-bringup
